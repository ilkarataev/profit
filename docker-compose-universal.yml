version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: redis-${CLIENT_NAME:-main}
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_${CLIENT_NAME:-main}:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  avito:
    build:
      context: ./avito-main
      dockerfile: Dockerfile
    container_name: avito-${CLIENT_NAME:-main}
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3030
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER:-}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AVITO_API_URL=${AVITO_API_URL}
      - WEBHOOK_URL_AVITO=${WEBHOOK_URL_AVITO}
      - BASE_URL=${BASE_URL}
      - BASE_URL_AVITO=${BASE_URL}/avito
      - SENTRY_DSN=${SENTRY_DSN:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.avito-${CLIENT_NAME:-main}.rule=Host(`${DOMAIN}`) && PathPrefix(`/avito/`)"
      - "traefik.http.routers.avito-${CLIENT_NAME:-main}.tls=true"
      - "traefik.http.routers.avito-${CLIENT_NAME:-main}.tls.certresolver=letsencrypt"
      - "traefik.http.services.avito-${CLIENT_NAME:-main}.loadbalancer.server.port=3030"
      - "traefik.http.middlewares.avito-${CLIENT_NAME:-main}-stripprefix.stripprefix.prefixes=/avito"
      - "traefik.http.routers.avito-${CLIENT_NAME:-main}.middlewares=avito-${CLIENT_NAME:-main}-stripprefix"

  hh:
    build:
      context: ./hh-main
      dockerfile: Dockerfile
    container_name: hh-${CLIENT_NAME:-main}
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3999
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER:-}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HH_CLIENT_ID=${HH_CLIENT_ID}
      - HH_CLIENT_SECRET=${HH_CLIENT_SECRET}
      - HH_API_URL=${HH_API_URL}
      - WEBHOOK_URL_HH=${WEBHOOK_URL_HH}
      - BASE_URL=${BASE_URL}
      - BASE_URL_HH=${BASE_URL}/hh
      - SENTRY_DSN=${SENTRY_DSN:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hh-${CLIENT_NAME:-main}.rule=Host(`${DOMAIN}`) && PathPrefix(`/hh/`)"
      - "traefik.http.routers.hh-${CLIENT_NAME:-main}.tls=true"
      - "traefik.http.routers.hh-${CLIENT_NAME:-main}.tls.certresolver=letsencrypt"
      - "traefik.http.services.hh-${CLIENT_NAME:-main}.loadbalancer.server.port=3999"
      - "traefik.http.middlewares.hh-${CLIENT_NAME:-main}-stripprefix.stripprefix.prefixes=/hh"
      - "traefik.http.routers.hh-${CLIENT_NAME:-main}.middlewares=hh-${CLIENT_NAME:-main}-stripprefix"

volumes:
  redis_data_${CLIENT_NAME:-main}:

networks:
  app-network:
    external: true
    name: traefik
