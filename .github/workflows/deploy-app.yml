name: Deploy Applications

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name'
        required: true
        default: 'web.test.ru'
        type: string
      client_name:
        description: 'Client identifier'
        required: true
        default: 'main'
        type: string
      action:
        description: 'Action'
        required: true
        default: 'deploy'
        type: choice
        options: [deploy, update]

jobs:
  deploy:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Check DNS resolution
        run: |
          echo "🔍 Checking DNS resolution for ${{ inputs.domain }}..."
          DNS_IP=$(dig +short ${{ inputs.domain }} | head -n1)
          if [ -z "$DNS_IP" ]; then
            echo "❌ DNS record for ${{ inputs.domain }} not found!"
            echo "Please configure DNS A record pointing to your server"
            echo "::error::DNS resolution failed for ${{ inputs.domain }}"
            exit 1
          else
            echo "✅ DNS: ${{ inputs.domain }} -> $DNS_IP"
          fi

      - name: Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
          ansible --version

      - name: Install Ansible collections
        run: |
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ inputs.domain }} >> ~/.ssh/known_hosts

      - name: Prepare source files
        run: |
          # Создаем символические ссылки на исходные файлы в корне репозитория
          ln -sf ../avito-main ansible/avito-main
          ln -sf ../hh-main ansible/hh-main
          ln -sf ../docker-compose-universal.yml ansible/docker-compose-universal.yml
          
          # Проверяем, что файлы существуют
          echo "📁 Checking source files:"
          ls -la ansible/avito-main ansible/hh-main ansible/docker-compose-universal.yml

      - name: Parse client configuration
        id: parse_config
        run: |
          # Получаем JSON конфигурацию клиента
          CLIENT_CONFIG='${{ vars[format('{0}_CONFIG', inputs.client_name)] }}'
          
          # Проверяем, что конфигурация существует
          if [ -z "$CLIENT_CONFIG" ] || [ "$CLIENT_CONFIG" = "null" ]; then
            echo "❌ Configuration for client '${{ inputs.client_name }}' not found!"
            echo "Please add CLIENT1_CONFIG variable with JSON configuration"
            echo "::error::Client configuration not found"
            exit 1
          fi
          
          # Парсим JSON и извлекаем переменные
          echo "avito_api_url=$(echo $CLIENT_CONFIG | jq -r '.avito_api_url // "https://api.avito.ru"')" >> $GITHUB_OUTPUT
          echo "hh_client_id=$(echo $CLIENT_CONFIG | jq -r '.hh_client_id // ""')" >> $GITHUB_OUTPUT
          echo "hh_api_url=$(echo $CLIENT_CONFIG | jq -r '.hh_api_url // "https://api.hh.ru"')" >> $GITHUB_OUTPUT
          echo "webhook_url_avito=$(echo $CLIENT_CONFIG | jq -r '.webhook_url_avito // ""')" >> $GITHUB_OUTPUT
          echo "webhook_url_hh=$(echo $CLIENT_CONFIG | jq -r '.webhook_url_hh // ""')" >> $GITHUB_OUTPUT
          echo "sentry_dsn=$(echo $CLIENT_CONFIG | jq -r '.sentry_dsn // ""')" >> $GITHUB_OUTPUT
          
          echo "✅ Client configuration parsed successfully"

      - name: Deploy / Update
        run: |
          cd ansible
          ansible-playbook -i "${{ inputs.domain }}," deploy-universal.yml \
            -u appuser \
            -e "site_domain=${{ inputs.domain }}" \
            -e "client_name=${{ inputs.client_name }}" \
            -e "avito_api_url=${{ steps.parse_config.outputs.avito_api_url }}" \
            -e "hh_client_id=${{ steps.parse_config.outputs.hh_client_id }}" \
            -e "hh_client_secret=${{ secrets[format('{0}_CLIENT_SECRET', inputs.client_name)] }}" \
            -e "hh_api_url=${{ steps.parse_config.outputs.hh_api_url }}" \
            -e "webhook_url_avito=${{ steps.parse_config.outputs.webhook_url_avito }}" \
            -e "webhook_url_hh=${{ steps.parse_config.outputs.webhook_url_hh }}" \
            -e "sentry_dsn=${{ steps.parse_config.outputs.sentry_dsn }}" \
            $([ "${{ inputs.action }}" = "update" ] && echo "--tags update")
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Cleanup SSH key
        if: always()
        run: ssh-add -D || true
